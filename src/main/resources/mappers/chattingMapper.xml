<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="net.nigne.kkt.mappers.chattingMapper">
   

   <select id="chattingCheck" resultType="net.nigne.kkt.domain.ChattingVO">
	select a.chatting_room_no
	from (
	select chatting_room_no
	from user_list
	where member_email = #{email}) as a,
	(select chatting_room_no
	from user_list
	where member_email = #{friend_email}) as b
	where a.chatting_room_no = b.chatting_room_no
	</select>

	<select id="chattingRoomInfo" resultType="net.nigne.kkt.domain.ChattingVO">
		select * 
		from chatting_room 
		where no = #{no}
	</select>

	<insert id="chattingInsert">
		insert into chatting_room(no, date) 
		values(no, now())
	</insert>

	<update id="chattingupdate">
		update chatting_room
		<!-- trim prefix="SET" suffixOverrides=","> </trim -->
		<set>
			<if test="trade_no != null">
				trade_no = #{trade_no},
			</if>
			<if test="buyer_email != null">
				buyer_email = #{buyer_email},
			</if>
		</set>
		where no = #{no}
	</update>
	
	<insert id="userListInsert">
		insert into user_list(chatting_room_no, member_email, date)
		values(#{chatting_room_no}, #{email}, now())
	</insert>

	<select id="chattingRoomNO" resultType="int">
		select max(no) from chatting_room
	</select>

	<insert id="msgInsert">
		insert into msg_list (no, msg, user_email, check_user, chatting_room_no, notice, date)
		values(no, #{msg}, #{email}, 0, #{chatting_room_no}, #{notice}, now())
	</insert>

	<select id="msgList" resultType="net.nigne.kkt.domain.ChattingVO">
		select * from member inner join (
		select * from msg_list
		where chatting_room_no = (
		select a.chatting_room_no from (
		select chatting_room_no
		from user_list
		where member_email = #{email}) a
		inner join (
		select chatting_room_no
		from user_list
		where member_email = #{friend_email}) b
		on a.chatting_room_no = b.chatting_room_no)
		order by no) c
		on member.email = c.user_email
		where date >= str_to_date(#{date}, '%Y-%m-%d %H:%i:%s')
	</select>

	<select id="chatlist" parameterType="HashMap" resultType="net.nigne.kkt.domain.MemberVO">
		select name, thumbnail, email
		from member
		where email = (
		select member_email
		from user_list
		where chatting_room_no = #{roomNo} and member_email != #{user_email} )
	</select>
	
	<select id="getFriend" parameterType="HashMap" resultType="String">
		select user_email
		from msg_list
		where chatting_room_no = #{roomNo} and user_email != #{user_email} limit 1;
	</select>
	
	<select id="cntmsg" parameterType="HashMap" resultType="int">
		select count(*)
		from msg_list
		where chatting_room_no = #{roomNo} and user_email = #{friend_email} and check_user = '0'
	</select>
	
	<select id="lastmsg" parameterType="HashMap" resultType="net.nigne.kkt.domain.Msg_listVO">
		select msg from  
       (select case when length(msg) > 10 then concat(substr(msg, 1, 10), '.....') else msg end msg from msg_list where chatting_room_no = #{roomNo} order by no desc  limit 1)a
	</select>
	
	<update id="checkmsg">
		update msg_list 
		set check_user = 1
		where check_user = 0 and chatting_room_no = #{chatting_room_no} and user_email = #{user_email}
	</update>
	
	<select id="roomlist" parameterType="String" resultType="HashMap">
		select b.chatting_room_no from (
		select m.chatting_room_no, max(m.date) a from msg_list m inner join(
		select chatting_room_no
		from user_list
		where member_email = #{email} and date is not null) c on m.chatting_room_no = c.chatting_room_no group by m.chatting_room_no order by a desc) b
	</select>
	
	<update id="exit">
		update user_list 
		set date = null 
		where chatting_room_no = #{no} and member_email = #{member_email}
	</update>
	
	<delete id="deleteRoom">
		delete from chatting_room 
		where (select count(*) from user_list where chatting_room_no=#{no} and date is not null) = 0 and no = #{no}
	</delete>
	
	<select id="myUserListDate" resultType="String">
		select date from user_list where chatting_room_no=#{chatting_room_no} and member_email = #{email}
	</select>
	
	<select id="oppositeUserListDate" resultType="String">
		select date from user_list where chatting_room_no=#{chatting_room_no} and member_email != #{email}
	</select>
	
	<update id="updateOppDate">
		update user_list set date = sysdate() where chatting_room_no=#{chatting_room_no} and member_email != #{email}
	</update>
	
	<update id="updateMyDate">
		update user_list set date = sysdate() where chatting_room_no=#{chatting_room_no} and member_email = #{email}
	</update>
	

</mapper>